#!/usr/bin/env php
<?php

declare(strict_types=1);

require $_composer_autoload_path ?? __DIR__ . '/vendor/autoload.php';

use Ahc\Cli\Input\Command;
use Retort\Validation\Validation;
use Retort\Validation\ValidObject;
use Retort\Validation\ValidString;
use Retort\Request\RetortRequest;
use Yosymfony\Toml\Toml;

function createAbstractType(?string $class)
{
    if (empty($class)) return null;
    if (!is_subclass_of($class, RetortRequest::class)) {
        print "Skipped: '$class' is not an instance of RetortRequest." . PHP_EOL;
        return;
    }

    $reflection = new ReflectionClass($class);
    $props = $reflection->getProperties(ReflectionProperty::IS_PUBLIC);

    $path = explode('\\', $class);
    $created = ['properties' => [], 'class' => $path[count($path) - 1]];

    foreach ($props as $prop) {
        $propName = $prop->name;

        $attrs = $prop->getAttributes(Validation::class, ReflectionAttribute::IS_INSTANCEOF);
        if (empty($attrs)) continue;
        $validationAttribute = $attrs[0];

        /* @var Base $instance */
        $instance = $validationAttribute->newInstance();
        $instance->propertyName = $propName;
        $property = [
            'name' => $propName,
            'nullable' => !$instance->notNullable
        ];

        $propType = $prop->getType()?->getName();

        if ($propType == 'array') {
            $property['iterable'] = true;
            if ($instance instanceof ValidObject) {
                $args = $validationAttribute->getArguments();
                if (count($args) < 2) continue;
                $property['type'] = createAbstractType($args[1]);
            } else {
                $property['type'] = $instance instanceof ValidString ? 'string' : 'number';
            }
        } else if ($instance instanceof ValidObject) {
            $args = $validationAttribute->getArguments();
            if (count($args) < 2) continue;
            $property['type'] = createAbstractType($args[1]);
        } else {
            $property['type'] = $propType;
        }

        $created['properties'][] = $property;
    }

    return $created;
}

function createDefinitions($abstractType, string $template, array $typeMap, array &$defs)
{
    foreach ($abstractType['properties'] as $property) {
        $type = gettype($property['type']);

        if ($type == 'array') {
            createDefinitions($property['type'], $template, $typeMap, $defs);
            $definition[] = [
                ...$property,
                'type' => $typeMap[$property['type']['class']] ?? $property['type']['class']
            ];
        } else {
            $definition[] = [
                ...$property,
                'type' => $typeMap[$property['type']] ?? $property['type']
            ];
        }
    }

    $m = new Mustache_Engine(array('entity_flags' => ENT_QUOTES));

    $defs[$abstractType['class']] = $m->render($template, ['class' => $abstractType['class'], 'definitions' => $definition]);
}

$path =  $path = explode('/', __FILE__);
array_pop($path);
$path = implode('/', $path);

$command = new Command('retort_typegen', 'Generate types');
$command
    ->option('-c, --config <file>', 'Configuration toml file', function ($file) use ($path) {
        $filename = $path . '/../../../' . $file;
        if (file_exists($filename)) return $filename;
        else return null;
    });

try {
    $command->parse($argv);
} catch (Exception $e) {
    exit($e->getMessage());
}

$args = $command->values(false);
if (empty($args['config'])) exit("Config file '$args[config]' not found.");

try {
    $config = Toml::parseFile($args['config']);
} catch (Exception $e) {
    exit('Config file error: ' . $e->getMessage());
}

if (empty($config['template'])) exit('No template specified.');

foreach ($config['classes'] as $class) {
    $abstract = createAbstractType($class);
    if (empty($abstract)) continue;

    $defs = [];
    createDefinitions($abstract, $config['template'], $config['typeMap'] ?? [], $defs);

    if (empty($config['output']['dir'])) {
        print(implode(PHP_EOL . PHP_EOL, $defs));
    } else {
        $classPath = explode('\\', $class);
        $className = array_pop($classPath);
        $outputFile = $className . '.' . $config['output']['extension'];
        file_put_contents($config['output']['dir'] . '/' . strtolower($outputFile), implode(PHP_EOL . PHP_EOL, $defs));
    }
}
