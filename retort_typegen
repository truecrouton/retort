#!/usr/bin/env php
<?php

declare(strict_types=1);

require $_composer_autoload_path ?? __DIR__ . '/vendor/autoload.php';

use Ahc\Cli\Input\Command;
use Retort\Validation\Validation;
use Retort\Validation\ValidObject;
use Retort\Validation\ValidString;
use Retort\Request\RetortRequest;

use function PHPUnit\Framework\fileExists;

function createAbstractType(?string $class)
{
    if (empty($class)) return null;
    if (!is_subclass_of($class, RetortRequest::class)) {
        print "Skipped '$class': is not an instance of RetortRequest." . PHP_EOL;
        return;
    }

    $reflection = new ReflectionClass($class);
    $props = $reflection->getProperties(ReflectionProperty::IS_PUBLIC);

    $path = explode('\\', $class);
    $created = ['properties' => [], 'class' => $path[count($path) - 1]];

    foreach ($props as $prop) {
        $propName = $prop->name;

        $attrs = $prop->getAttributes(Validation::class, ReflectionAttribute::IS_INSTANCEOF);
        if (empty($attrs)) continue;
        $validationAttribute = $attrs[0];

        /* @var Base $instance */
        $instance = $validationAttribute->newInstance();
        $instance->propertyName = $propName;
        $property = [
            'name' => $propName,
            'nullable' => !$instance->notNullable
        ];

        $propType = $prop->getType()?->getName();

        if ($propType == 'array') {
            $property['iterable'] = true;
            if ($instance instanceof ValidObject) {
                $args = $validationAttribute->getArguments();
                if (count($args) < 2) continue;
                $property['type'] = createAbstractType($args[1]);
            } else {
                $property['type'] = $instance instanceof ValidString ? 'string' : 'number';
            }
        } else if ($instance instanceof ValidObject) {
            $args = $validationAttribute->getArguments();
            if (count($args) < 2) continue;
            $property['type'] = createAbstractType($args[1]);
        } else {
            $property['type'] = $propType;
        }

        $created['properties'][] = $property;
    }

    return $created;
}

function createDefinitions($abstractType, string $template, array &$defs)
{
    foreach ($abstractType['properties'] as $property) {
        $type = gettype($property['type']);

        if ($type == 'array') {
            createDefinitions($property['type'], $template, $defs);
            $definition[] = [
                ...$property,
                'type' => $property['type']['class']
            ];
        } else {
            $definition[] = $property;
        }
    }

    $m = new Mustache_Engine(array('entity_flags' => ENT_QUOTES));

    $defs[$abstractType['class']] = $m->render($template, ['class' => $abstractType['class'], 'definitions' => $definition]);
    //return implode(PHP_EOL, $definition);
}

$command = new Command('retort_typegen', 'Generate types');
$command
    // Arguments are separated by space
    // Format: `<name>` for required, `[name]` for optional
    //  `[name:default]` for default value, `[name...]` for variadic (last argument)
    ->arguments('<classes...>')
    // `-h --help`, `-V --version`, `-v --verbosity` options are already added by default.
    // Format: `<name>` for required, `[name]` for optional
    ->option('-e --extension [ext]', 'Output file extension (required with output dir)', fn ($value) => strlen($value) < 20 ? $value : null)
    ->option('-o --output-dir [dir]', 'Output dir (default outputs to STDOUT)')
    ->option('-t,--template [file]', 'Use a custom mustache generator template')
    ->option('-g,--generate [generator]', 'Use a built in in generator, e.g., ts, flutter', fn ($value) => in_array($value, ['ts', 'flutter']) ? $value : null, 'ts');

try {
    $command->parse($argv);
} catch (Exception $e) {
    exit($e->getMessage());
}

$templates['ts'] = <<<T
interface {{class}} {
    {{#definitions}}
    {{name}}{{#nullable}}?{{/nullable}}: {{type}}{{#iterable}}[]{{/iterable}};
    {{/definitions}}
}
T;

$templates['flutter'] = <<<T
interface {{class}} {
    {{#definitions}}
    {{name}}{{#nullable}}?{{/nullable}}: {{type}}{{#iterable}}[]{{/iterable}};
    {{/definitions}}
}
T;

// Print all values:
$args = $command->values(false);

if (!empty($args['template'])) {
    $filename = str_replace('/retort_typegen', '', __FILE__) . '/' . $args['template'];
    if (!file_exists($filename)) exit("Template file: '$filename' not found.");

    $fileTemplate = file_get_contents($filename);
}

if (empty($args['generate'])) exit('Invalid generator specified.');

if (!empty($args['outputDir'])) {
    if (empty($args['extension'])) exit("File extension (of less than 20 characters) must be specified for file output.");
    $dir = str_replace('/retort_typegen', '', __FILE__) . '/' . $args['outputDir'];
    if (!is_dir($dir)) exit("Output dir '$dir' not found.");

    $outputDir = $args['outputDir'];
}

$template = $fileTemplate ?? $templates[$args['generate']];

foreach ($args['classes'] as $class) {
    $abstract = createAbstractType($class);

    if (empty($abstract)) continue;

    $defs = [];
    createDefinitions($abstract, $template, $defs);

    if (!empty($outputDir)) {
        $path = explode('\\', $class);
        $outputFile = $path[count($path) - 1] . ".$args[extension]";
        file_put_contents($outputDir . '/' . strtolower($outputFile), implode(PHP_EOL . PHP_EOL, $defs));
    } else {
        print(implode(PHP_EOL . PHP_EOL, $defs));
    }
}
/*
$type = createAbstractType($argv[1]);
print_r($type);

$d = [];
createDefinitions($type, $d);
print_r($d);

print(__FILE__);
*/